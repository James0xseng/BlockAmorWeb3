// vulnerability-scan.ts
'use server';

/**
 * @fileOverview Smart Contract Vulnerability Scanner.
 *
 * - vulnerabilityScan - A function that handles the smart contract vulnerability scanning process.
 * - VulnerabilityScanInput - The input type for the vulnerabilityScan function.
 * - VulnerabilityScanOutput - The return type for the vulnerabilityScan function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilityScanInputSchema = z.object({
  smartContractCode: z
    .string()
    .describe('The smart contract code to scan for vulnerabilities.'),
});
export type VulnerabilityScanInput = z.infer<typeof VulnerabilityScanInputSchema>;

const VulnerabilityScanOutputSchema = z.object({
  vulnerabilities: z
    .array(z.string())
    .describe('A list of vulnerabilities found in the smart contract code.'),
  suggestedFixes: z
    .array(z.string())
    .describe('A list of suggested fixes for the vulnerabilities.'),
  securityScore: z
    .number()
    .describe('A security score for the smart contract code, from 0 to 100.'),
});
export type VulnerabilityScanOutput = z.infer<typeof VulnerabilityScanOutputSchema>;

export async function vulnerabilityScan(input: VulnerabilityScanInput): Promise<VulnerabilityScanOutput> {
  return vulnerabilityScanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'vulnerabilityScanPrompt',
  input: {schema: VulnerabilityScanInputSchema},
  output: {schema: VulnerabilityScanOutputSchema},
  prompt: `You are a smart contract security expert. You will analyze the given smart contract code for common vulnerabilities such as reentrancy, integer overflow, gas limit issues, and others.

  Based on your analysis, you will provide a list of vulnerabilities found, suggested fixes for each vulnerability, and a security score for the smart contract code (0-100, higher is better).

  Smart Contract Code:
  \`\`\`
  {{{smartContractCode}}}
  \`\`\`

  Respond in a structured format, including vulnerabilities, suggested fixes, and a security score.
  `, // end of prompt
});

const vulnerabilityScanFlow = ai.defineFlow(
  {
    name: 'vulnerabilityScanFlow',
    inputSchema: VulnerabilityScanInputSchema,
    outputSchema: VulnerabilityScanOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
